# Get Canvas Context
snippet getCtx
	const canvas = document.getElementById('${1:canvas}');
	const ctx = canvas.getContext('${2:2d}');

# Set Fill Style
snippet fillStyle
	ctx.fillStyle = '${1:#000}';

# Set Stroke Style
snippet strokeStyle
	ctx.strokeStyle = '${1:#000}';

# Set Line Width
snippet lineWidth
	ctx.lineWidth = ${1:2};

# Draw Rectangle
snippet rect
	ctx.fillRect(${1:x}, ${2:y}, ${3:width}, ${4:height});

# Draw Stroked Rectangle
snippet strokeRect
	ctx.strokeRect(${1:x}, ${2:y}, ${3:width}, ${4:height});

# Clear Rectangle
snippet clearRect
	ctx.clearRect(${1:x}, ${2:y}, ${3:width}, ${4:height});

# Draw Circle
snippet circle
	ctx.beginPath();
	ctx.arc(${1:x}, ${2:y}, ${3:radius}, 0, 2 * Math.PI);
	ctx.fill();

# Draw Line
snippet line
	ctx.beginPath();
	ctx.moveTo(${1:x1}, ${2:y1});
	ctx.lineTo(${3:x2}, ${4:y2});
	ctx.stroke();

# Draw Text
snippet text
	ctx.font = '${1:16px Arial}';
	ctx.fillText('${2:Your Text}', ${3:x}, ${4:y});

# Load Image
snippet loadImage
	const img = new Image();
	img.src = '${1:image_src}';
	img.onload = function() {
		ctx.drawImage(img, ${2:x}, ${3:y}, ${4:width}, ${5:height});
	};

# Create Gradient
snippet gradient
	const gradient = ctx.create${1:Linear}Gradient(${2:x0}, ${3:y0}, ${4:x1}, ${5:y1});
	gradient.addColorStop(${6:0}, '${7:#000}');
	gradient.addColorStop(${8:1}, '${9:#fff}');
	ctx.fillStyle = gradient;
	ctx.fillRect(${10:x}, ${11:y}, ${12:width}, ${13:height});

# Create Radial Gradient
snippet radialGradient
	const radialGradient = ctx.createRadialGradient(${1:x0}, ${2:y0}, ${3:r0}, ${4:x1}, ${5:y1}, ${6:r1});
	radialGradient.addColorStop(${7:0}, '${8:#000}');
	radialGradient.addColorStop(${9:1}, '${10:#fff}');
	ctx.fillStyle = radialGradient;
	ctx.fillRect(${11:x}, ${12:y}, ${13:width}, ${14:height});

# Draw Image to Canvas
snippet drawImage
	const img = new Image();
	img.src = '${1:image_path}';
	img.onload = function() {
		ctx.drawImage(img, ${2:x}, ${3:y}, ${4:width}, ${5:height});
	};

# Save and Restore Canvas State
snippet saveRestore
	ctx.save();
	${1:// code to apply transformations or styles}
	ctx.restore();

# Rotate Canvas
snippet rotate
	ctx.save();
	ctx.translate(${1:x}, ${2:y});
	ctx.rotate(${3:angle} * Math.PI / 180);
	${4:// draw rotated elements}
	ctx.restore();

# Scale Canvas
snippet scale
	ctx.save();
	ctx.scale(${1:x_scale}, ${2:y_scale});
	${3:// draw scaled elements}
	ctx.restore();

# Translate Canvas
snippet translate
	ctx.translate(${1:x}, ${2:y});

# Draw Bezier Curve
snippet bezierCurve
	ctx.beginPath();
	ctx.moveTo(${1:x1}, ${2:y1});
	ctx.bezierCurveTo(${3:cp1x}, ${4:cp1y}, ${5:cp2x}, ${6:cp2y}, ${7:x2}, ${8:y2});
	ctx.stroke();

# Draw Quadratic Curve
snippet quadraticCurve
	ctx.beginPath();
	ctx.moveTo(${1:x1}, ${2:y1});
	ctx.quadraticCurveTo(${3:cpx}, ${4:cpy}, ${5:x2}, ${6:y2});
	ctx.stroke();
	# Line Styles
## 2.2.6.1 lineWidth
snippet lineWidth
	ctx.lineWidth = ${1:2};

## 2.2.6.2 lineCap
snippet lineCap
	ctx.lineCap = '${1:butt}'; // values can be 'butt', 'round', 'square'

## 2.2.6.3 lineJoin
snippet lineJoin
	ctx.lineJoin = '${1:miter}'; // values can be 'round', 'bevel', 'miter'

## 2.2.6.4 miterLimit
snippet miterLimit
	ctx.miterLimit = ${1:10};

# Shadows
## 2.2.7.1 shadowOffsetX
snippet shadowOffsetX
	ctx.shadowOffsetX = ${1:4};

## 2.2.7.2 shadowOffsetY
snippet shadowOffsetY
	ctx.shadowOffsetY = ${1:4};

## 2.2.7.3 shadowBlur
snippet shadowBlur
	ctx.shadowBlur = ${1:10};

## 2.2.7.4 shadowColor
snippet shadowColor
	ctx.shadowColor = '${1:rgba(0, 0, 0, 0.5)}';

# Simple Shapes (Rectangles)
## 2.2.8.1 fillRect
snippet fillRect
	ctx.fillRect(${1:x}, ${2:y}, ${3:width}, ${4:height});

## 2.2.8.2 strokeRect
snippet strokeRect
	ctx.strokeRect(${1:x}, ${2:y}, ${3:width}, ${4:height});

## 2.2.8.3 clearRect
snippet clearRect
	ctx.clearRect(${1:x}, ${2:y}, ${3:width}, ${4:height});

# Complex Shapes (Paths)
## 2.2.9.1 beginPath
snippet beginPath
	ctx.beginPath();

## 2.2.9.2 closePath
snippet closePath
	ctx.closePath();

## 2.2.9.3 stroke
snippet stroke
	ctx.stroke();

## 2.2.9.4 fill
snippet fill
	ctx.fill();

## 2.2.9.5 lineTo
snippet lineTo
	ctx.lineTo(${1:x}, ${2:y});

## 2.2.9.6 moveTo
snippet moveTo
	ctx.moveTo(${1:x}, ${2:y});

## 2.2.9.7 rect
snippet rect
	ctx.rect(${1:x}, ${2:y}, ${3:width}, ${4:height});

## 2.2.9.8 quadraticCurveTo
snippet quadraticCurveTo
	ctx.quadraticCurveTo(${1:cpX}, ${2:cpY}, ${3:x}, ${4:y});

## 2.2.9.9 bezierCurveTo
snippet bezierCurveTo
	ctx.bezierCurveTo(${1:cp1X}, ${2:cp1Y}, ${3:cp2X}, ${4:cp2Y}, ${5:x}, ${6:y});

## 2.2.9.10 arc
snippet arc
	ctx.arc(${1:x}, ${2:y}, ${3:radius}, ${4:startAngle}, ${5:endAngle}, ${6:false});

## 2.2.9.11 arcTo
snippet arcTo
	ctx.arcTo(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:radius});

## 2.2.9.12 clip
snippet clip
	ctx.clip();

## 2.2.9.13 isPointInPath
snippet isPointInPath
	ctx.isPointInPath(${1:x}, ${2:y});

# Text
## 2.2.10.1 font
snippet font
	ctx.font = '${1:16px Arial}';

## 2.2.10.2 textAlign
snippet textAlign
	ctx.textAlign = '${1:left}'; // 'left', 'right', 'center', 'start', 'end'

## 2.2.10.3 textBaseline
snippet textBaseline
	ctx.textBaseline = '${1:alphabetic}'; // 'top', 'hanging', 'middle', 'alphabetic', 'ideographic', 'bottom'

## 2.2.10.4 fillText
snippet fillText
	ctx.fillText('${1:text}', ${2:x}, ${3:y}, ${4:maxWidth});

## 2.2.10.5 strokeText
snippet strokeText
	ctx.strokeText('${1:text}', ${2:x}, ${3:y}, ${4:maxWidth});

## 2.2.10.6 measureText
snippet measureText
	const textWidth = ctx.measureText('${1:text}').width;

# Drawing Images
## 2.2.11.1 drawImage (dx, dy)
snippet drawImage
	const img = new Image();
	img.src = '${1:imageSrc}';
	img.onload = function() {
		ctx.drawImage(img, ${2:dx}, ${3:dy});
	};

## 2.2.11.2 drawImage (dx, dy, dw, dh)
snippet drawImageDwDh
	ctx.drawImage(${1:image}, ${2:dx}, ${3:dy}, ${4:dw}, ${5:dh});

## 2.2.11.3 drawImage (sx, sy, sw, sh, dx, dy, dw, dh)
snippet drawImageFull
	ctx.drawImage(${1:image}, ${2:sx}, ${3:sy}, ${4:sw}, ${5:sh}, ${6:dx}, ${7:dy}, ${8:dw}, ${9:dh});

# Pixel Manipulation
## 2.2.12.1 ImageData
snippet ImageData
	const imageData = ctx.getImageData(${1:sx}, ${2:sy}, ${3:sw}, ${4:sh});

## 2.2.12.2 createImageData
snippet createImageData
	const newImageData = ctx.createImageData(${1:width}, ${2:height});

## 2.2.12.3 getImageData
snippet getImageData
	const imageData = ctx.getImageData(${1:sx}, ${2:sy}, ${3:sw}, ${4:sh});

## 2.2.12.4 putImageData
snippet putImageData
	ctx.putImageData(${1:imageData}, ${2:dx}, ${3:dy});
	# 3.4.1 strokeCircle
snippet strokeCircle
	function strokeCircle(x, y, radius) {
		ctx.beginPath();
		ctx.arc(x, y, radius, 0, 2 * Math.PI);
		ctx.stroke();
	}

# 3.4.1 fillCircle
snippet fillCircle
	function fillCircle(x, y, radius) {
		ctx.beginPath();
		ctx.arc(x, y, radius, 0, 2 * Math.PI);
		ctx.fill();
	}

# 3.4.2 addGrid
snippet addGrid
	function addGrid(delta, color, font) {
		ctx.strokeStyle = color || '#ccc';
		ctx.font = font || '12px Arial';
		for (let x = delta; x < canvas.width; x += delta) {
			ctx.moveTo(x, 0);
			ctx.lineTo(x, canvas.height);
			ctx.stroke();
		}
		for (let y = delta; y < canvas.height; y += delta) {
			ctx.moveTo(0, y);
			ctx.lineTo(canvas.width, y);
			ctx.stroke();
		}
	}